/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

fn main() {
    let answer = even_fibs(4_000_000);
    println!("{}", answer.iter().sum::<u64>());
}

fn fib(n: u64) -> u64 {
    match n {
        0 => 1,
        1 => 1,
        _ => fib(n - 1) + fib(n - 2),
    }
}

fn even_fibs(l: u64) -> Vec<u64> {
    let mut stack: Vec<u64> = Vec::new();
    for i in 1..=l {
        let fb = fib(i);
        if fb > l {
            break;
        }
        if fb % 2 == 0 {
            stack.push(fb);
        }
    }
    stack
}

#[test]
fn test_fib() {
    assert_eq!(fib(2), 2);
    assert_eq!(fib(3), 3);
    assert_eq!(fib(4), 5);
    assert_eq!(fib(5), 8);
}

#[test]
fn test_even_fibs() {
    assert_eq!(even_fibs(5), [2]);
    assert_eq!(even_fibs(10), [2, 8]);
}

#[test]
fn test_case() {
    assert_eq!(even_fibs(4_000_000).iter().sum::<u64>(), 4613732);
}
